name: 'terraform-azure-deployment'

on:
  push:
    branches:
      - main
      - feature/*
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-azure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

run-name: "${{ github.ref_name }}.${{ github.sha }}.${{ github.workflow }}."

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_CLI: false
  TF_LOG: info
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform-verify:
    name: 'Terraform Verify'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Terraform linting
        id: lint
        run: |
          cd terraform
          tflint --recursive --only=terraform_unused_declarations

      - name: Terraform fmt check
        id: fmt
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate -no-color
  
  terraform-plan:
    needs: terraform-verify
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init 

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -var="public_key_path=${{ secrets.SSH_PUBLIC_KEY }}" -out=tfplan
        continue-on-error: false

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-output
          path: terraform/tfplan
          retention-days: 5

      - name: Check Terraform Plan Status
        if: steps.plan.outcome != 'success'
        run: |
          echo "Terraform plan failed. Please check the logs for more details."
          exit 1
      
      - name: Send Notification on Plan Failure
        uses: actions/github-script@v7
        if: failure()
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Terraform Plan is Failed',
              body: 'Terraform plan job failed in workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });
            
            console.log(`Issue created: ${issue.data.html_url}`);

  terraform-apply:
    needs: terraform-plan
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=terraform-state" \
            -backend-config="key=two-server-architecture.tfstate" \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-output
          path: terraform
      
      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan